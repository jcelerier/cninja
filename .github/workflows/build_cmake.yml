name: Build

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            cxx: "../llvm-mingw/bin/clang++.exe",
            cxxflags: "",
            asset_name: "cninja-*-Windows.zip",
            release_flags: "era=win7 static lto=full small"
          }
        - {
            name: "Ubuntu",
            os: ubuntu-latest,
            cxx: "clang++-9",
            cxxflags: "-stdlib=libc++",
            asset_name: "cninja-*-Linux.tar.gz",
            release_flags: "static lto=full small"
          }
        - {
            name: 'Tarball',
            os: ubuntu-latest,
            cxx: "clang++-9",
            cxxflags: "-stdlib=libc++",
            asset_name: "cninja-*-Linux.tar.gz",
            release_flags: "static lto=full small"
          }
        - {
            name: "macOS",
            os: macos-latest,
            cxx: "clang++",
            cxxflags: "",
            asset_name: "cninja-*-macOS.tar.gz",
            release_flags: "era=10.11 static lto=full small"
          }
    steps:
    - uses: actions/checkout@v2
    
    - name: Get latest release version number
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Install dependencies
      if: matrix.config.name != 'Tarball'
      run:  |
        git submodule update --init --recursive
        
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install clang-9 libc++-9-dev libc++abi-9-dev lld-9 ninja-build libboost-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake -P 'cmake/download-llvm.cmake'
          cmake -E tar x llvm.zip
          cmake -E tar x ninja.zip
          echo "::add-path::$PWD"
          echo "::add-path::$PWD/llvm-mingw/bin"
          choco install ninja
        else
          brew install ninja boost
        fi
      shell: bash

    - name: Configure
      if: matrix.config.name != 'Tarball'
      env:
        CXXFLAGS: ${{ matrix.config.cxxflags }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        mkdir build && cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake -GNinja -DBOOST_ROOT="$BOOST_ROOT_1_72_0" ..
        else
          cmake ..
        fi
      shell: bash

    - name: Build
      if: matrix.config.name != 'Tarball'
      run: cd build && cmake --build .

    - name: Test
      if: matrix.config.name != 'Tarball'
      run: |
        if [ "$RUNNER_OS" != "Windows" ]; then
          cd build && ctest -V
        fi
      shell: bash

    - name: Deploy binaries
      if: matrix.config.name != 'Tarball'
      run: |
        export ROOT_PATH=$PWD

        build/cninja ${{ matrix.config.release_flags }} 

        cd build-*
        cmake --build . --target install
        cd install/bin

        if [ "$RUNNER_OS" == "Windows" ]; then
          zip ${{ matrix.config.asset_name }} cninja.exe
        else
          tar -czf ${{ matrix.config.asset_name }} cninja
        fi
        mv ${{ matrix.config.asset_name }} $ROOT_PATH/
        
    - name: Deploy source tarball
      if: matrix.config.name == 'Tarball'
      run: |      
        # Deploy source archive too
        if [  ${{ matrix.config.name }} == 'Tarball' ]; then
          find . -name .git -exec rm -rf {} \; || true
          find . -name .git -exec rm -rf {} \; || true
          
          tar caf cninja-${{ steps.get_version.outputs.version }}-src.tar.gz \
            3rdparty src tests configs \
            CMakeLists.txt LICENSE.md README.md
          
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import -
          gpg -ab cninja-${{ steps.get_version.outputs.version }}-src.tar.gz
        fi

    - name: Upload
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: cninja-*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

