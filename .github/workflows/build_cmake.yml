name: Build

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            artifact: "build/cninja-*-Windows.zip",
            os: windows-latest,
            build_type: "Release",
            cxx: "../llvm-mingw/bin/clang++.exe",
            cxxflags: "",
            asset_name: cninja-${{ steps.get_version.outputs.version }}-Windows.zip,
            release_flags: "era=win7 static lto=full small"
          }
        - {
            name: "Ubuntu",
            artifact: "build/cninja-*-Linux.zip",
            os: ubuntu-latest,
            build_type: "Release",
            cxx: "clang++-9",
            cxxflags: "-stdlib=libc++",
            asset_name: cninja-${{ steps.get_version.outputs.version }}-Linux.zip,
            release_flags: "static lto=full small"
          }
        - {
            name: "macOS",
            artifact: "build/cninja-*-Darwin.zip",
            os: macos-latest,
            build_type: "Release",
            cxx: "clang++",
            cxxflags: "",
            asset_name: cninja-${{ steps.get_version.outputs.version }}-macOS.zip,
            release_flags: "era=10.11 static lto=full small"
          }
    steps:
    - uses: actions/checkout@v2
    
    - name: Get latest release version number
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Install dependencies
      run:  |
        git submodule update --init --recursive
        
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install clang-9 libc++-9-dev libc++abi-9-dev lld-9 ninja-build libboost-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake -P 'cmake/download-llvm.cmake'
          cmake -E tar x llvm.zip
          cmake -E tar x ninja.zip
          echo "::add-path::$PWD"
          echo "::add-path::$PWD/llvm-mingw/bin"
          choco install ninja
        else
          brew install ninja boost
        fi
      shell: bash

    - name: Configure
      env:
        CXXFLAGS: ${{ matrix.config.cxxflags }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        mkdir build && cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake -GNinja -DBOOST_ROOT="$BOOST_ROOT_1_72_0" ..
        else
          cmake ..
        fi
      shell: bash

    - name: Build
      run: cd build && cmake --build .

    - name: Test
      run: |
        if [ "$RUNNER_OS" != "Windows" ]; then
          cd build && ctest -V
        fi
      shell: bash

    - name: Deploy
      run: |      
        build/cninja  ${{ matrix.config.release_flags }} 

        cd build-*
        cmake --build . --target install
        cd install/bin

        if [ "$RUNNER_OS" == "Windows" ]; then
          zip ${{ matrix.config.asset_name }} cninja.exe
        else
          tar -czf ${{ matrix.config.asset_name }} cninja
        fi

    - name: Upload
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}

